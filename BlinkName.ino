/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/a7c7d535-3197-489c-bb80-aacc7da32a9c

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudLight led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

// Include necessary header file for IoT cloud properties
#include "thingProperties.h"

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  pinMode(13, OUTPUT);   // Set pin 13 as an output (LED)
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  //delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

// Function to create a short LED pulse (dot) in Morse code
void dot()
{
  digitalWrite(13, HIGH);
  delay(300);
  digitalWrite(13, LOW); 
  delay(900);
}

// Function to create a long LED pulse (dash) in Morse code
void dash()
{
  digitalWrite(13, HIGH);
  delay(900);
  digitalWrite(13, LOW);
  delay(900);
}

// Function to convert an alphabet character to Morse code LED pulses
void create_morse(char alpha)
{
switch (alpha)
{
  //morse code patterns for respective alphabets
case 'a':
case 'A': dot(); dash(); 
          break;
case 'b':
case 'B': dash(); dot(); dot(); dot(); 
          break;
case 'c':
case 'C': dash(); dot(); dash(); dot(); 
          break;
case 'd':
case 'D': dash(); dot(); dot();
          break;
case 'e':
case 'E': dot(); 
          break;
case 'f':
case 'F': dot(); dot(); dash(); dot(); 
          break;
case 'g':
case 'G': dash(); dash(); dot();
          break;
case 'h':
case 'H': dot(); dot(); dot(); dot(); 
          break;
case 'i':
case 'I': dot(); dot(); 
          break;
case 'j':
case 'J': dot(); dash(); dash(); dash();
          break;
case 'k':
case 'K': dash(); dot(); dash(); 
          break;
case 'l':
case 'L': dot(); dash(); dot(); dot(); 
          break;
case 'm':
case 'M': dash(); dash();
          break;
case 'n':
case 'N': dash(); dot();
          break;
case 'o':
case 'O': dash(); dash(); dash();
          break;
case 'p':
case 'P': dot(); dash(); dash(); dot();
          break;
case 'q':
case 'Q': dash(); dash(); dot(); dash(); 
          break;
case 'r':
case 'R': dot(); dash(); dot(); 
          break;
case 's':
case 'S': dot(); dot(); dot(); 
          break;
case 'u':
case 'U': dot(); dot(); dash();
          break;
case 'v':
case 'V': dot(); dot(); dot(); dash(); 
          break;
case 'w':
case 'W': dot(); dash(); dash(); 
          break;
case 'x':
case 'X': dash(); dot(); dot(); dash();
          break;
case 'y':
case 'Y': dash(); dot(); dash(); dash(); 
          break;
case 'z':
case 'Z': dash(); dash(); dot(); dot();
          break;
default: break;
}
}

  void loop() {
    ArduinoCloud.update(); // Update Arduino IoT Cloud connection


  }



  /*
    Since Led is READ_WRITE variable, onLedChange() is
    executed every time a new value is received from IoT Cloud.
  */
// Callback function triggered when the IoT Cloud property 'led' changes
  void onLedChange()  {
    // Add your code here to act upon Led change
    // Check if the 'led' property is set to 1
    if (led == 1) {
      char name[] = "tanya";  // Morse code for the name "tanya"

      for (int i = 0; i < sizeof(name); i++)  // Iterate through each character in the name
      {
            char alpha=name[i];   // Convert the character to Morse code
            create_morse(alpha);
      }


    } else {
      digitalWrite(13, LOW);  // Turn off the LED if 'led' property is not set to 1
    }
  }
